// Code generated by "enumer -type ChargeMode -trimprefix ChargeMode -text -transform=lower"; DO NOT EDIT.

package api

import (
	"fmt"
	"strings"
)

const _ChargeModeName = "modeemptymodeoffmodenowmodeminpvmodepv"

var _ChargeModeIndex = [...]uint8{0, 9, 16, 23, 32, 38}

const _ChargeModeLowerName = "modeemptymodeoffmodenowmodeminpvmodepv"

func (i ChargeMode) String() string {
	if i < 0 || i >= ChargeMode(len(_ChargeModeIndex)-1) {
		return fmt.Sprintf("ChargeMode(%d)", i)
	}
	return _ChargeModeName[_ChargeModeIndex[i]:_ChargeModeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ChargeModeNoOp() {
	var x [1]struct{}
	_ = x[ModeEmpty-(0)]
	_ = x[ModeOff-(1)]
	_ = x[ModeNow-(2)]
	_ = x[ModeMinPV-(3)]
	_ = x[ModePV-(4)]
}

var _ChargeModeValues = []ChargeMode{ModeEmpty, ModeOff, ModeNow, ModeMinPV, ModePV}

var _ChargeModeNameToValueMap = map[string]ChargeMode{
	_ChargeModeName[0:9]:        ModeEmpty,
	_ChargeModeLowerName[0:9]:   ModeEmpty,
	_ChargeModeName[9:16]:       ModeOff,
	_ChargeModeLowerName[9:16]:  ModeOff,
	_ChargeModeName[16:23]:      ModeNow,
	_ChargeModeLowerName[16:23]: ModeNow,
	_ChargeModeName[23:32]:      ModeMinPV,
	_ChargeModeLowerName[23:32]: ModeMinPV,
	_ChargeModeName[32:38]:      ModePV,
	_ChargeModeLowerName[32:38]: ModePV,
}

var _ChargeModeNames = []string{
	_ChargeModeName[0:9],
	_ChargeModeName[9:16],
	_ChargeModeName[16:23],
	_ChargeModeName[23:32],
	_ChargeModeName[32:38],
}

// ChargeModeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ChargeModeString(s string) (ChargeMode, error) {
	if val, ok := _ChargeModeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ChargeModeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ChargeMode values", s)
}

// ChargeModeValues returns all values of the enum
func ChargeModeValues() []ChargeMode {
	return _ChargeModeValues
}

// ChargeModeStrings returns a slice of all String values of the enum
func ChargeModeStrings() []string {
	strs := make([]string, len(_ChargeModeNames))
	copy(strs, _ChargeModeNames)
	return strs
}

// IsAChargeMode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ChargeMode) IsAChargeMode() bool {
	for _, v := range _ChargeModeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for ChargeMode
func (i ChargeMode) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for ChargeMode
func (i *ChargeMode) UnmarshalText(text []byte) error {
	var err error
	*i, err = ChargeModeString(string(text))
	return err
}
